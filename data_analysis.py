# -*- coding: utf-8 -*-
"""5CL Capstone

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KpSt_8kxbbWmC_gyiCj_oPwEHQOUUPyA
"""

import numpy as np
import math
import matplotlib.pyplot as plt
import pandas as pd
from google.colab import drive
from scipy import optimize
drive.mount('/content/drive')

#Defining functions
def agreement(A, B, A_err, B_err):
    if abs(A - B) < 2*np.sqrt((A_err)**2 + (B_err)**2):
        return "Agrees"
    else:
        return "Does not Agree"

def power(I, V):
  return I * V

def heat(m, c, Tf, Ti):
  return abs(m * c * (Tf - Ti))
c = 4.184 #J/g°C

def work(power, time):
  return power * time
time = 120

def cop(heat, work):
  return heat / work

def compute_uncertainty(m, c, delta_T, I, V, time, delta_m, delta_delta_T, delta_V):
    COP = (m * c * delta_T) / (I * V * time)
    relative_uncertainty = math.sqrt((delta_m / m)**2 +(delta_delta_T / delta_T)**2 +(delta_V / V)**2)
    delta_COP = COP * relative_uncertainty
    return delta_COP

def fourier_law(k, A, T_out, T_in, L, dt):
  return k*A*(T_out-T_in)/L*dt
k_s = 0.033
room_T = 22
A = 7e-4
A_err = 1e-6
L = 1.7e-2
L_err = 1e-4
dt = 0.5

def heat_flux_uncertainty(k, T0, A, dA, T, dT, x, dx):
    term1 = (k * (T0 - T) / x) * dA
    term2 = (k * A / x) * dT
    term3 = (k * A * (T0 - T) / x**2) * dx
    dq = np.sqrt(term1**2 + term2**2 + term3**2)*dt
    return dq

def Q_adjustment(T):
  Q_ad = 0
  Q_err = np.array([])
  for i in np.arange(len(T1)):
    dQ = fourier_law(k_s, A, room_T, T[i], L, dt)
    dQ_err = heat_flux_uncertainty(k_s, room_T, A, A_err, T[i], 0.01, L, L_err)
    Q_err = np.append(Q_err, dQ_err)
    Q_ad += dQ
  return np.array([Q_ad, np.sqrt(sum(Q_err**2))])

def adjusted_cop_error(q, sigma_q, W, sigma_W):
    COP = q / W
    sigma_COP = np.sqrt((sigma_q / W)**2 + ((q * sigma_W) / W**2)**2)
    return sigma_COP

def linear_fit (x, a, b):
  return a*x+b

def fit_uncertainty(a, sigma_a, m, sigma_m, V, sigma_V, c, I):
    cop = (a * m * c) / (I * V)
    dCOP_da = (m * c) / (I * V)
    dCOP_dm = (a * c) / (I * V)
    dCOP_dV = -(a * m * c) / (I * V**2)
    sigma_cop = np.sqrt(
        (dCOP_da * sigma_a)**2 +
        (dCOP_dm * sigma_m)**2 +
        (dCOP_dV * sigma_V)**2
    )

    return sigma_cop

#Computing nominal COPs
def cop_with_error(Q, sigma_Q, V, sigma_V, I):
    Q = np.array(Q, dtype=float)
    sigma_Q = np.array(sigma_Q, dtype=float)
    V = np.array(V, dtype=float)
    sigma_V = np.array(sigma_V, dtype=float)

    # Compute COP
    cop = Q / (I * V)

    # Error propagation
    term_Q = (sigma_Q / (I * V))**2
    term_V = (Q * sigma_V / (I * V**2))**2
    sigma_cop = np.sqrt(term_Q + term_V)

    return cop, sigma_cop

print(cop_with_error(12, 1, 7.5, 0.25, 2.5))
print(cop_with_error(15, 1, 9.5, 0.5, 3))
print(cop_with_error(3, 1, 4.13, 0.3, 1.25))

print(cop_with_error(13, 1, 7.25, 0.35, 2.5))
print(cop_with_error(18, 1, 8.78, 0.5, 3))
print(cop_with_error(3, 1, 3.84, 0.3, 1.25))

#Importing data
trial_1 = pd.read_csv('/content/drive/MyDrive/5CL Capstone Data/Trial 1.csv')
trial_2 = pd.read_csv('/content/drive/MyDrive/5CL Capstone Data/Trial 2.csv')
trial_3 = pd.read_csv('/content/drive/MyDrive/5CL Capstone Data/Trial 3.csv')

s_trial_1 = pd.read_csv('/content/drive/MyDrive/5CL Capstone Data/Submerged Trial 1.csv')
s_trial_2 = pd.read_csv('/content/drive/MyDrive/5CL Capstone Data/Submerged Trial 2.csv')
s_trial_3 = pd.read_csv('/content/drive/MyDrive/5CL Capstone Data/Submerged Trial 3.csv')

#t = times, T = temperatures
t1 = np.array(trial_1.iloc[:,0])
t2 = np.array(trial_2.iloc[:,0])
t3 = np.array(trial_3.iloc[:,0])

T1 = np.array(trial_1.iloc[:,1])
T2 = np.array(trial_2.iloc[:,1])
T3 = np.array(trial_3.iloc[:,1])

s_t1 = np.array(s_trial_1.iloc[:,0])
s_t2 = np.array(s_trial_2.iloc[:,0])
s_t3 = np.array(s_trial_3.iloc[:,0])

s_T1 = np.array(s_trial_1.iloc[:,1])
s_T2 = np.array(s_trial_2.iloc[:,1])
s_T3 = np.array(s_trial_3.iloc[:,1])

T_err = np.ones(len(T1))*0.15

#Trial 1
power_1 = power(2.5, 7.5) #I, V
heat_1 = heat(15, c, 16.7 ,21.7)
work_1 = work(power_1,time)
cop_1 = cop(heat_1, work_1)
print(cop_1)
print(compute_uncertainty(15, c, 21.7-16.7, 2.5, 7.5, time, 1, 0.01, 0.25))

#Adjusting for heat loss through styrofoam
Q_A_1 = Q_adjustment(T1)
Q_total_1 = Q_A_1[0]+heat_1
adjusted_cop_err_1 = adjusted_cop_error(Q_total_1, Q_A_1[1], work_1, 0.5*7.5*np.sqrt(120))
print(cop(Q_total_1, work_1))
print(adjusted_cop_err_1)

#Linear fit for T and t
params1, params1_cov = optimize.curve_fit(linear_fit, t1, T1)
a_1 = abs(params1[0])
cop_1_fit = 15*c*a_1/power_1
print(cop_1_fit)
print(fit_uncertainty(params1[0], np.sqrt((params1_cov[0][0])), 15, 0.01, 7.5, 0.25, c, 2.5))
print(params1)
print(np.sqrt((params1_cov[0][0])))

#Reduced chi-squared
chi_squared = np.sum(((T1 - linear_fit(t1,*params1)) / T_err) ** 2)
dof = 118
reduced_chi_squared = chi_squared / dof
print(reduced_chi_squared)

plt.scatter(t1,T1,c = 'b', s= 0.5)
plt.title('Trial 1: 15 g, 2.5 A, 7.50±0.25 V')
plt.plot(t1, linear_fit(t1, *params1), label = 'Fitted slope: -0.041±0.001')
plt.xlabel('Time (s)')
plt.ylabel('Temperature (C)')
plt.legend()
plt.show()

#Trial 2
power_2 = power(3, 9.5) #watts
heat_2 = heat(12, c, 18.2 , 24.9)
work_2 = work(power_2,time)
cop_2 = cop(heat_2, work_2)
print(cop_2)
print(compute_uncertainty(12, c, 24.9-18.2,3, 9.5, time, 1, 0.01, 0.5))

#Adjusting for heat loss through styrofoam
Q_A_2 = Q_adjustment(T2)
Q_total_2 = Q_A_2[0]+heat_2
adjusted_cop_err_2 = adjusted_cop_error(Q_total_2, Q_A_2[1], work_2, 1*9.5*np.sqrt(120))
print(cop(Q_total_2, work_2))
print(adjusted_cop_err_2)

#Linear fit
params2, params2_cov = optimize.curve_fit(linear_fit, t2, T2)
a_2 = abs(params2[0])
cop_2_fit = 12*c*a_2/power_2
print(cop_2_fit)
print(fit_uncertainty(params2[0], np.sqrt((params2_cov[0][0])), 12, 0.01, 9.5, 0.5, c, 3))
print(params2)
print(np.sqrt((params2_cov[0][0])))

#Reduced chi-squared
chi_squared = np.sum(((T2 - linear_fit(t2,*params2)) / T_err) ** 2)
dof = 118
reduced_chi_squared = chi_squared / dof
print(reduced_chi_squared)

plt.scatter(t2,T2,c = 'b', s= 0.5)
plt.title('Trial 2: 12 g, 3 A, 9.50±0.50 V')
plt.plot(t2, linear_fit(t2, *params2), label = 'Fitted slope: -0.037±0.001')
plt.xlabel('Time (s)')
plt.ylabel('Temperature (C)')
plt.legend()
plt.show()

#Trial 3
power_3 = power(1.25, 4.13) #watts
heat_3 = heat(8, c, 20.3 , 23.5)
work_3 = work(power_3,time)
cop_3 = cop(heat_3, work_3)
print(cop_3)
print(compute_uncertainty(8, c, 23.5-20.3, 1.25, 4.13, time, 1, 0.01, 0.3))

#Adjusting for heat loss through styrofoam
Q_A_3 = Q_adjustment(T3)
Q_total_3 = Q_A_3[0]+heat_3
adjusted_cop_err_3 = adjusted_cop_error(Q_total_3, Q_A_3[1], work_3, 0.6*4.13*np.sqrt(120))
print(cop(Q_total_3, work_3))
print(adjusted_cop_err_3)

#Linear fit
params3, params3_cov = optimize.curve_fit(linear_fit, t3, T3)
a_3 = abs(params3[0])
cop_3_fit = 8*c*a_3/power_3
print(cop_3_fit)
print(fit_uncertainty(params3[0], np.sqrt((params3_cov[0][0])), 8, 0.01, 4.13, 0.3, c, 1.25))
print(params3)
print(np.sqrt((params3_cov[0][0])))

#Reduced chi-squared
chi_squared = np.sum(((T3 - linear_fit(t3,*params3)) / T_err) ** 2)
dof = 118
reduced_chi_squared = chi_squared / dof
print(reduced_chi_squared)

plt.scatter(t3,T3,c = 'b', s= 0.5)
plt.title('Trial 3: 8 g, 1.25 A, 4.13±0.30 V')
plt.plot(t3, linear_fit(t3, *params3), label = 'Fitted slope: -0.021±0.001')
plt.xlabel('Time (s)')
plt.ylabel('Temperature (C)')
plt.legend()
plt.show()

#Submerged
#Trial 1
power_1_s = power(2.5, 7.25) #watts
heat_1_s = heat(15, c, 14.7 , 20.5)
work_1_s = work(power_1_s, time)
cop_1_s = cop(heat_1_s, work_1_s)
print(cop_1_s)
print(compute_uncertainty(15, c, 20.5-14.7, 2.5, 7.25, time, 1, 0.01, 0.35))

#Adjusting for heat loss through styrofoam
Q_A_1_s = Q_adjustment(s_T1)
Q_total_1_s = Q_A_1_s[0]+heat_1_s
adjusted_cop_err_1_s = adjusted_cop_error(Q_total_1_s, Q_A_1_s[1], work_1_s, 0.7*7.25*np.sqrt(120))
print(cop(Q_total_1_s, work_1_s))
print(adjusted_cop_err_1_s)

#Linear fit
params1_s, params1_s_cov = optimize.curve_fit(linear_fit, s_t1, s_T1)
a_1_s = abs(params1_s[0])
cop_1_s_fit = 15*c*a_1_s/power_1_s
print(cop_1_s_fit)
print(fit_uncertainty(params1_s[0], np.sqrt((params1_s_cov[0][0])), 15, 0.01, 7.25, 0.35, c, 2.5))
print(params1_s)
print(np.sqrt((params1_s_cov[0][0])))

#Reduced chi-squared
chi_squared = np.sum(((s_T1 - linear_fit(s_t1,*params1_s)) / T_err) ** 2)
dof = 118
reduced_chi_squared = chi_squared / dof
print(reduced_chi_squared)

plt.scatter(s_t1,s_T1,c = 'r', s= 0.5)
plt.title('Submerged Trial 1: 15 g, 2.5 A, 7.25±0.35 V')
plt.plot(s_t1, linear_fit(s_t1, *params1_s), label = 'Fitted slope: -0.039±0.001')
plt.xlabel('Time (s)')
plt.ylabel('Temperature (C)')
plt.legend()
plt.show()

#Trial 2
power_2_s = power(3, 8.78) #watts
heat_2_s = heat(12, c, 12.9 , 19.7)
work_2_s = work(power_2_s, time)
cop_2_s = cop(heat_2_s, work_2_s)
print(cop_2_s)
print(compute_uncertainty(12, c, 19.7-12.9, 3, 8.78, time, 1, 0.01, 0.5))

#Adjusting for heat loss through styrofoam
Q_A_2_s = Q_adjustment(s_T2)
Q_total_2_s = Q_A_1_s[0]+heat_2_s
adjusted_cop_err_2_s = adjusted_cop_error(Q_total_2_s, Q_A_2_s[1], work_2_s, 1*8.78*np.sqrt(120))
print(cop(Q_total_2_s, work_2_s))
print(adjusted_cop_err_2_s)

#Linear fit
params2_s, params2_s_cov = optimize.curve_fit(linear_fit, s_t2, s_T2)
a_2_s = abs(params2_s[0])
cop_2_s_fit = 12*c*a_2_s/power_2_s
print(cop_2_s_fit)
print(fit_uncertainty(params2_s[0], np.sqrt((params2_s_cov[0][0])), 12, 0.01, 8.78, 0.5, c, 3))
print(params2_s)
print(np.sqrt((params2_s_cov[0][0])))

#Reduced chi-squared
chi_squared = np.sum(((s_T2 - linear_fit(s_t2,*params2_s)) / T_err) ** 2)
dof = 118
reduced_chi_squared = chi_squared / dof
print(reduced_chi_squared)

plt.scatter(s_t2,s_T2,c = 'r', s= 0.5)
plt.title('Submerged Trial 2: 12 g, 3 A, 8.78±0.50 V')
plt.plot(s_t2, linear_fit(s_t2, *params2_s), label = 'Fitted slope: -0.059±0.001')
plt.xlabel('Time (s)')
plt.ylabel('Temperature (C)')
plt.legend()
plt.show()

#Trial 3
power_3_s = power(1.25, 3.84) #watts
heat_3_s = heat(8, c, 15.4 , 21.2)
work_3_s = work(power_3_s, time)
cop_3_s = cop(heat_3_s, work_3_s)
print(cop_3_s)
print(compute_uncertainty(8, c, 21.2-15.4, 1.25, 3.84, time, 1, 0.01, 0.3))

#Adjusting for heat loss through styrofoam
Q_A_3_s = Q_adjustment(s_T3)
Q_total_3_s = Q_A_3_s[0]+heat_3_s
adjusted_cop_err_3_s = adjusted_cop_error(Q_total_3_s, Q_A_3_s[1], work_3_s, 0.6*3.84*np.sqrt(120))
print(cop(Q_total_3_s, work_3_s))
print(adjusted_cop_err_3_s)

#Linear fit
params3_s, params3_s_cov = optimize.curve_fit(linear_fit, s_t3, s_T3)
a_3_s = abs(params3_s[0])
cop_3_s_fit = 8*c*a_3_s/power_3_s
print(cop_3_s_fit)
print(fit_uncertainty(params3_s[0], np.sqrt((params3_s_cov[0][0])), 8, 0.01, 3.84, 0.3, c, 1.25))
print(params3_s)
print(np.sqrt((params3_s_cov[0][0])))

#Reduced chi-squared
chi_squared = np.sum(((s_T3 - linear_fit(s_t3,*params3_s)) / T_err) ** 2)
dof = 118
reduced_chi_squared = chi_squared / dof
print(reduced_chi_squared)

plt.scatter(s_t3,s_T3,c = 'r', s= 0.5)
plt.title('Submerged Trial 3: 8 g, 1.25 A, 3.84±0.30 V')
plt.plot(s_t3, linear_fit(s_t3, *params3_s), label = 'Fitted slope: -0.044±0.0003')
plt.xlabel('Time (s)')
plt.ylabel('Temperature (C)')
plt.legend()
plt.show()

